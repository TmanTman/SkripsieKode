<<<<<<< HEAD
#!/usr/bin/env python
# a bar plot with errorbars
import numpy as np
import matplotlib.pyplot as plt

N = 5
menMeans = (20, 35, 30, 35, 27)
menStd =   (2, 3, 4, 1, 2)

ind = np.arange(N)  # the x locations for the groups
width = 0.35       # the width of the bars

fig, ax = plt.subplots()
rects1 = ax.bar(ind, menMeans, width, color='r', yerr=menStd)

womenMeans = (25, 32, 34, 20, 25)
womenStd =   (3, 5, 2, 3, 3)
rects2 = ax.bar(ind+width, womenMeans, width, color='y', yerr=womenStd)

# add some
ax.set_ylabel('Scores')
ax.set_title('Scores by group and gender')
ax.set_xticks(ind+width)
ax.set_xticklabels( ('G1', 'G2', 'G3', 'G4', 'G5') )

ax.legend( (rects1[0], rects2[0]), ('Men', 'Women') )

def autolabel(rects):
    # attach some text labels
    for rect in rects:
        height = rect.get_height()
        ax.text(rect.get_x()+rect.get_width()/2., 1.05*height, '%d'%int(height),
                ha='center', va='bottom')

autolabel(rects1)
autolabel(rects2)

plt.show()
=======
import numpy as np
import scipy.optimize as opt
import matplotlib.pyplot as plt

def objective(x, lights, pv_in, fig, ax, timeslots):
	grid_usage = 0
	for i in xrange(len(lights)):
		if lights[i]+pv_in[i]+x[i] > 0:
			grid_usage = grid_usage+lights[i]+pv_in[i]+x[i]
	##Graphing##
	ax.clear()
	ax.bar(timeslots, x, bottom=0)	
	fig.canvas.draw()
	####
	return grid_usage

def constr(x):
	##TEST WHETHER RETURNING -1 WOULD STILL WORK, OR DOES FUNCTION CHECK FOR IMPROVEMENT EACH ITERATION?
	#Bound constraints
	for j, val in enumerate(x):
	#Checks upper bound per element
		if val > 150:
			return 150 - x[j]
	#Checks that pump operates certain amount of time (energy) per day
	if sum(x) > 700:
		return 700 - sum(x)
	if sum(x) < 650:
		return sum(x) - 650
	#All tests passed successfully	
	return 1 	

##Init##
X0 = np.array([50, 50, 50, 50, 50, 50 ,50, 50, 50, 50, 50, 50])
lights  = [50, 50, 75, 150, 100, 100, 80, 80, 120, 180, 120, 100]
pv_in = [0, 0, 0, -50, -150, -300, -400, -300, -150, -50, 0, 0]
##Graphing##
timeslots = np.arange(12)
plt.ion()
fig, ax = plt.subplots()
plt.xlim(0, 15)
plt.ylim(0, 200)
plt.xlabel('timeslot')
plt.title('Energy use')
ax.bar(timeslots, X0, bottom=0)
fig.canvas.draw()
##Optimization
x = opt.fmin_cobyla(objective, X0, cons=(constr,), args=(lights, pv_in, fig, ax, timeslots), consargs=(), rhoend=1e-7)
>>>>>>> b8e19c132274c7d0ad30817a1eee329c0e6cedce

